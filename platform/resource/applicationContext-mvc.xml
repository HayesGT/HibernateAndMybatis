<?xml version="1.0" encoding="utf-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:mvc="http://www.springframework.org/schema/mvc" 
	xmlns:context="http://www.springframework.org/schema/context" 
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
						http://www.springframework.org/schema/beans/spring-beans-4.1.xsd
						http://www.springframework.org/schema/mvc 
						http://www.springframework.org/schema/mvc/spring-mvc-4.1.xsd
						http://www.springframework.org/schema/context 
	 					http://www.springframework.org/schema/context/spring-context-4.1.xsd 
">
     <!-- springmvc 配置文件
                 开启注解
                 只扫描Controller类的注解
   -->
    <!-- 注解支持 -->  
	<mvc:annotation-driven/>
 
   <!-- 拦截器 -->  
    <mvc:interceptors>  
        <!-- 多个拦截器,顺序执行 -->  
        <mvc:interceptor>  
           <mvc:mapping path="/**" /><!-- 如果不配置或/*,将拦截所有的Controller -->  
           <bean class="com.yxkong.common.interceptor.WebCommonInterceptor"></bean>  
        </mvc:interceptor>  
        <mvc:interceptor>  
           <mvc:mapping path="/**" /><!-- 如果不配置或/*,将拦截所有的Controller -->  
           <bean class="com.yxkong.common.interceptor.CommonInterceptor"></bean>  
        </mvc:interceptor>  
    </mvc:interceptors>  
		<!-- 对静态资源的访问，使用默认的servlet，在web.xml的DispatcherServlet拦截器之前配置
	   <servlet-mapping>
          <servlet-name>default</servlet-name>
          <url-pattern>*.jpg(这里配置对应的资源)</url-pattern>
       </servlet-mapping>
            也可以使用   
         <mvc:resources mapping="/images/**" location="/images/" />   
              mapping:映射到ResourceHttpRequestHandler进行处理
              location:指定静态资源的位置.可以是web application根目录下、jar包里面，这样可以把静态资源压缩到jar包中
              cache-period:可以使得静态资源进行web cache  -->
	<mvc:default-servlet-handler/>
	<mvc:resources mapping="/assets/**" location="/assets/" />  
    <!-- 自动扫描controller包下的所有类，使其认为spring mvc的控制器 -->
	<context:component-scan base-package="com.yxkong" >
     	<!-- 允许定义过滤器将基包下的某些类纳入或排除-->
		<context:include-filter type="annotation" expression="org.springframework.stereotype.Controller"/> 
	    <!-- 排除 -->
	    <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Service"/>
	</context:component-scan>
	<!-- ExceptionResolver begin -->
	<bean class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerExceptionResolver" />
	<!-- ExceptionResolver end -->


	<bean name="openSessionViewInterceptor" class="org.springframework.orm.hibernate4.support.OpenSessionInViewInterceptor">
        <property name="sessionFactory" ref="sessionFactory" />
    </bean>

	<bean class="org.springframework.web.servlet.mvc.annotation.DefaultAnnotationHandlerMapping">
		<!-- 是否为全路径 -->
		<!-- <property name="alwaysUseFullPath" value="true" /> -->
		<property name="interceptors">
			<list>
				<ref bean="openSessionViewInterceptor" />
			</list>
		</property>
	</bean>
	
	<bean
		class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter">
		<property name="messageConverters">
			<list>
				<bean class="org.springframework.http.converter.FormHttpMessageConverter" />
				<ref bean="stringHttpMessageConverter" />
				<ref bean="marshallingConverter" />
				<ref bean="jsonConverter" />
				<bean
					class="org.springframework.http.converter.ByteArrayHttpMessageConverter" />
				<bean
					class="org.springframework.http.converter.ResourceHttpMessageConverter" />
			</list>
		</property>
	</bean>
   <!-- SpringMVC上传文件时,需配置MultipartResolver处理器 -->
    <bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
        <!-- 指定所上传文件的总大小不能超过2KB......注意maxUploadSize属性的限制不是针对单个文件,而是所有文件的容量之和
        <property name="maxUploadSize" value="2000000"/> -->
    </bean>
     
    <!-- SpringMVC在超出上传文件限制时,会抛出org.springframework.web.multipart.MaxUploadSizeExceededException -->
    <!-- 该异常是SpringMVC在检查上传的文件信息时抛出来的,而且此时还没有进入到Controller方法中 -->
    <bean id="exceptionResolver" class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver">
        <property name="exceptionMappings">
            <props>
                <!-- 遇到MaxUploadSizeExceededException异常时,自动跳转到/WEB-INF/jsp/error_fileupload.jsp页面 -->
                <prop key="org.springframework.web.multipart.MaxUploadSizeExceededException">error_fileupload</prop>
            </props>
        </property>
    </bean>
	<bean id="stringHttpMessageConverter"
		class="org.springframework.http.converter.StringHttpMessageConverter" />

	<!-- marshallingConverter可用jaxb或者xstream，jaxb需要在javabean上添加annotation,总体来说xstream好 -->
	<bean id="marshallingConverter"
		class="org.springframework.http.converter.xml.MarshallingHttpMessageConverter">
		<!-- 构造函数里判断参数是否为Unmarshaller类型，如果是，则同时设置Unmarshaller属性和marshaller属性 -->
		<constructor-arg ref="xStreamMarshaller" />
		<property name="supportedMediaTypes" value="application/xml" />
	</bean>

	<!-- jaxb begin -->
	<!-- <bean id="jaxb2Marshaller" class="org.springframework.oxm.jaxb.Jaxb2Marshaller"> 
		<property name="classesToBeBound"> <list> <value>demo.bean.Demo</value> <value>demo.bean.DemoInner</value> 
		</list> </property> </bean> -->
	<!-- jaxb end -->

	<!-- xstream start -->
	<bean id="xStreamMarshaller" class="org.springframework.oxm.xstream.XStreamMarshaller">
	</bean>
	<!-- xstream end -->

	<!-- jsonConverter用到jackson json lib -->
	<bean id="jsonConverter"
		class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">
		<property name="supportedMediaTypes" value="application/json" />
	</bean>
	<!-- The ContentNegotiatingViewResolver does not resolve views itself, but 
		delegates to other ViewResolvers. By default, these other view resolvers 
		are picked up automatically from the application context, though they can 
		also be set explicitly by using the viewResolvers property. Note that in 
		order for this view resolver to work properly, the order property needs to 
		be set to a higher precedence than the others (the default is Ordered.HIGHEST_PRECEDENCE.) 
		This view resolver uses the requested media type to select a suitable View 
		for a request. This media type is determined by using the following criteria: 
		If the requested path has a file extension and if the setFavorPathExtension(boolean) 
		property is true, the mediaTypes property is inspected for a matching media 
		type. If the request contains a parameter defining the extension and if the 
		setFavorParameter(boolean) property is true, the mediaTypes property is inspected 
		for a matching media type. The default name of the parameter is format and 
		it can be configured using the parameterName property. If there is no match 
		in the mediaTypes property and if the Java Activation Framework (JAF) is 
		both enabled and present on the class path, FileTypeMap.getContentType(String) 
		is used instead. If the previous steps did not result in a media type, and 
		ignoreAcceptHeader is false, the request Accept header is used. Once the 
		requested media type has been determined, this resolver queries each delegate 
		view resolver for a View and determines if the requested media type is compatible 
		with the view's content type). The most compatible view is returned. Additionally, 
		this view resolver exposes the defaultViews property, allowing you to override 
		the views provided by the view resolvers. Note that these default views are 
		offered as candicates, and still need have the content type requested (via 
		file extension, parameter, or Accept header, described above). You can also 
		set the default content type directly, which will be returned when the other 
		mechanisms (Accept header, file extension or parameter) do not result in 
		a match. For example, if the request path is /view.html, this view resolver 
		will look for a view that has the text/html content type (based on the html 
		file extension). A request for /view with a text/html request Accept header 
		has the same result. -->
	<bean class="org.springframework.web.servlet.view.ContentNegotiatingViewResolver">
		<property name="order" value="1" />
		<property name="defaultContentType" value="text/html" />
		<!-- 是否从扩展名中取mediaType(如xxx.xml,xxx.html),与mediaTypes匹配 -->
		<property name="favorPathExtension" value="true" />
		<!-- 默认值:format,当favorParameter=true,根据parameterName来获取mediaType,与mediaTypes匹配 -->
		<property name="parameterName" value="mediaType" />
		<!-- 是否从请求的url路径中获取 mediaType(如:/xxx/xxx?mediaType=xml),与mediaTypes匹配 -->
		<property name="favorParameter" value="true" />
		<!-- 是否忽略请求头里的Accept属性 -->
		<property name="ignoreAcceptHeader" value="false" />
		<property name="mediaTypes">
			<map>
				<entry key="htm" value="text/html" />
				<!-- <entry key="json" value="application/json" /> -->
				<entry key="xml" value="application/xml" />
				<entry key="txt" value="text/plain" />
				<entry key="xls" value="application/vnd.ms-excel" />
			</map>
		</property>
		<property name="viewResolvers">
			<list>
			    <!--视图解析器链
			         	 当定义多个视图解析器的时候，就会形成视图解析器链。当controller返回一个视图名称的时候，会在视图解析器链上按照排序顺序进行处理。
			           	每个视图解析器都实现了ordered接口，数值越小就越靠前，默认都是最大值，order属性时Integer类型
			     		注意：像InternalResourceViewResolver这种能解析所有的视图，即永远能返回一个非空View对象的ViewResolver一定要把它放在ViewResolver链的最后面
			    -->
			    <!-- 展示层使用freemarker-->
			    <bean  id="freemarkerView" class="org.springframework.web.servlet.view.freemarker.FreeMarkerViewResolver">
			        <property name="cache" value="false"/>
			        <!-- 给方法名加前缀，一般没必要（注意这里不是路径）
			        <property name="prefix" value="fm_"/>  
			        -->
			        <!-- 模板后缀，指定ftl页面为模板 -->
			        <property name="suffix" value=".ftl"/>
			        <!-- 使用对应的freemarker模板类来解析视图 -->
			        <property name="viewClass" value="org.springframework.web.servlet.view.freemarker.FreeMarkerView"/>
			         <!--如果你需要使用Spring 对 FreeMarker 宏命令的支持, 将这个属性设为true-->
			        <property name="exposeSpringMacroHelpers" value="true"/>
			        <!-- 允许访问请求属性，默认为false -->
			        <property name="exposeRequestAttributes" value="true"/>
			        <!-- 允许访问会话属性，默认为false -->
			        <property name="exposeSessionAttributes" value="true"/>
			        <!-- 页面上下文，类似于request.contextPath -->
			        <property name="requestContextAttribute" value="rc"/>
			        <!-- 模板输出内容编码，此处应与defaultEncoding保持一致 -->
			        <property name="contentType" value="text/html;charset=UTF-8"/>
			        <!-- 接卸顺序，数字越小，访问的时候先使用该解析器去解析 -->
			        <property name="order" value="0"/>
			    </bean>
			    <!--jsp视图解析器-->
				<bean id="viewResolverCommon" class="org.springframework.web.servlet.view.InternalResourceViewResolver">
					<property name="prefix" value="/WEB-INF/pages/"/>  
			    	<property name="suffix" value=".jsp"/><!--可为空,方便实现自已的依据扩展名来选择视图解释类的逻辑 -->
					<property name="viewClass" value="org.springframework.web.servlet.view.JstlView"/>
					<property name="order" value="1"/>
				</bean>
				<bean class="org.springframework.web.servlet.view.BeanNameViewResolver"/>
			</list>
		</property>
	</bean>
	<bean id="freemarkerConfig" class="org.springframework.web.servlet.view.freemarker.FreeMarkerConfigurer">
       <!-- 模板文件所在目录  templateLoaderPath配置单个， templateLoaderPaths配置多个 -->
       <property name="templateLoaderPaths">
          <list>
             <value>/WEB-INF/common/</value>
             <value>/WEB-INF/pages/</value>
          </list>
       </property>
       <!-- FreeMarker属性配置 -->
       <property name="freemarkerSettings">
           <props>
              <!-- 
				 每隔多长时间检查模板是否更新，单位为秒
				 设置时间过长，会造成开发的时候修改.ftl后页面不刷新
				 建议生产系统设置时间长一些
				 如果不经常更新模板可将更新的延迟时间设定长一点
			 -->
			 <!-- 自动探测标签，替换语法[#/]预定义指令，[@/]自定义指令 -->
			 <prop key="tag_syntax">auto_detect</prop>
             <prop key="template_update_delay">0</prop>
              <!-- 默认编码 -->
             <prop key="defaultEncoding">UTF-8</prop>
             <!-- 设置url字符集，转换用 -->
             <prop key="url_escaping_charset">UTF-8</prop>
             <prop key="locale">zh_CN</prop>
             <prop key="boolean_format">true,false</prop>
             <prop key="datetime_format">yyyy-MM-dd HH:mm:ss</prop>
             <!-- <result column="birthday" property="birthday" jdbcType="DATE" />
                  date_format 映射的是jdbcType,不是bean中的类型
              -->
             <prop key="date_format">yyyy-MM-dd</prop>
             <prop key="time_format">HH:mm:ss</prop>
             <prop key="number_format">0.######</prop>
             <!-- 去掉多余的空格 -->
             <prop key="whitespace_stripping">true</prop>
             <!-- 如果变量为null,转化为空字符串,比如做比较的时候按照空字符做比较 -->
             <prop key="classic_compatible">true</prop>
             <!-- 对象包装 -->
			 <prop key="object_wrapper">freemarker.ext.beans.BeansWrapper</prop>
           </props>
       </property>
    </bean>
</beans>
